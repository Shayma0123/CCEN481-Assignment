clc;clear

frameTransmissionTime = 1e-3; % 1ms
AveragePacketArrivalRate = [100 200 350 500 600 750 850 1000 1500 2000 ]; %  in Packets per second 
numUsers = 1200;
OfferedLoad = AveragePacketArrivalRate*frameTransmissionTime; % Normalized Offered Load 

for m = 1:length(AveragePacketArrivalRate)

    maxRetransmissions = [0 1 3 7 ]; % Sets the maximum number of re-transmissions attempts

    for a = 1:length(maxRetransmissions)
        
        % The total number of transmissionsv(retransmissions + original) for
        % the total simulation time for each (lambda(m), kmax(a)) pairs
        totalTransmissions = 0;
        totalRetransmissions = 0; 
        successfulTransmissions = 0;
        maxPropagationDelay = 3.33e-6; 
        % Defines a structure for storing the info. of the retransmitting
        % stations
        retransmissionQueue = struct('Station', {}, 'k_attempts', {}, 'new_trans_t', {});
        % Defines an array to log the transmitting stations  
        transmittingStations = [];
        % Sets the current time to be 0, 
        % Initiolizes the packetArrivalLog vector with (0,0), assuming the
        % first original packet is transmitted at t = 0s 
        packetArrivalLog = [0 0]; currentTime = 0; 
        collision =0;
       
        %%%%%%%%%%%%%%%%%%%%%%%%%%%% Packet Arrival Module %%%%%%%%%%%%%%%%%%%%%%%%




        for sim_iteration = 1:25 % every sim iteration simulates 1 seconds

            %%%%%%%%%%% Module 1: Generating the Packet Arrival Vector & the %%%%%%%%
            %%%%%%%%%%% corresponding transmitting stations%%%%%%%%%%%%%%%
            [packetArrivalLog, randomTransmittingStations] =  packet_arr_n_trans_stat_lis(currentTime, numUsers, packetArrivalLog, sim_iteration, AveragePacketArrivalRate(m));



            %%%%%%%%%%% Module 2: Transmitting the first packet at t = 0, and detectiong collision %%%%%%%%%%%%%%%

            q =1;

            if (q == 1) && (sim_iteration == 1)

                [collision, totalTransmissions, successfulTransmissions, transmittingStations] = transmitting_first_packet_at_t_zero_n_col_det(q,packetArrivalLog,frameTransmissionTime, successfulTransmissions, transmittingStations, randomTransmittingStations,totalTransmissions);
                
                if (collision == 1)


                    %%%%%%%%%%% Module 3: Collision Handling of Original Packets %%%%%%%%%%%%%%%%

                    totalRetransmissions  = totalRetransmissions +1;
                    fprintf("Station %d''s packet collided with another packet. The station waits for retransmission \n",transmittingStations(q))
                    if(maxRetransmissions(a) ~=0)
                    % creates a new element of the retransmissionQueue structure 
                    newRetransmission.k_attempts = 1;
                    newRetransmission.Station = transmittingStations(q);

                    % Uses BEB method to calculate the next transmission time 
    
                    R = randi([0 2^(newRetransmission.k_attempts)-1]);
                    delay = R*frameTransmissionTime + 2*maxPropagationDelay; nextTransmissionTime = delay + currentTime;	

                    newRetransmission.new_trans_t = nextTransmissionTime;

                    retransmissionQueue(end +1) = newRetransmission;
                    index = numel(retransmissionQueue); 

                    % appends the packetArrivalLog with the station's next transmission time 

                    packetArrivalLog = [packetArrivalLog;nextTransmissionTime index];
                    packetArrivalLog = sortrows(packetArrivalLog, 1, 'ascend');
                	fprintf("Station %d will re-transmits at t = %0.4f \n",transmittingStations(q),nextTransmissionTime)
                    end
                end
            end
    


            while (q<=length(packetArrivalLog) & packetArrivalLog(q,1)<=sim_iteration )
                q = q+1;
                


                %%%%%%%%%%%%%%%%%%%%%%%% Module 4: Packet Transmission and Collision Detection %%%%%%%%%%%%%%%%%%%%%

                [collision, totalTransmissions, currentTime, transmittingStations, successfulTransmissions] = Packet_Transmission_n_Collision_Detection(q, totalTransmissions, packetArrivalLog, transmittingStations, randomTransmittingStations, retransmissionQueue, successfulTransmissions, frameTransmissionTime);

                if (collision == 1)


                 
                    if(maxRetransmissions(a) ~= 0)

                    %%%%%%%%%%%%%%%%%% Module 3: Collision Handling for Original Packets %%%%%%%%%%%%%%%%%%

                        totalRetransmissions  = totalRetransmissions +1;
                        fprintf("Station %d's packet collided with another packet. The station waits for retransmission \n",transmittingStations(end))

                        if (packetArrivalLog(q,2) ==0)

                            % creates a new element of the retransmissionQueue structure 
                            newRetransmission.k_attempts = 1;
                            newRetransmission.Station = transmittingStations(q);

                            % Uses BEB method to calculate the next transmission time 
    
                            R = randi([0 2^(newRetransmission.k_attempts)-1]);
                            delay = R*frameTransmissionTime + 2*maxPropagationDelay; nextTransmissionTime = delay + currentTime;
                            newRetransmission.new_trans_t = nextTransmissionTime;

                            % appends the retransmissionQueue structure with a
                            % new element containing the retransmiting station info.
                            retransmissionQueue(end +1) = newRetransmission;

                            index = numel(retransmissionQueue);

                            % appends the packetArrivalLog with the station's next transmission time 
                            packetArrivalLog = [packetArrivalLog; nextTransmissionTime index];

                            packetArrivalLog = sortrows(packetArrivalLog, 1, 'ascend');
                	        fprintf("Station %d will re-transmits at t = %0.4f \n",transmittingStations(end),nextTransmissionTime)
                    
                       
                  
                        else

                            %%%%%%%%%%%%%%%%%%%%%%%% Module 5: Collision Handling for Retransmitted Packets %%%%%%%%%%%%%%%%%%%%%
                             num = packetArrivalLog(q,2); 

                            % Increments the number of attempts field of the retransmissionQueue structure
                            retransmissionQueue(num).k_attempts = retransmissionQueue(num).k_attempts +1;
                            

                            % if the maximum number of attempts is not reached
                            if (retransmissionQueue(num).k_attempts <= maxRetransmissions(a))

                                R = randi([0 2^(retransmissionQueue(num).k_attempts-1)]);
                                delay = R*frameTransmissionTime + 2*maxPropagationDelay;	nextTransmissionTime = delay +currentTime;

                                % updates the new_trans_t field of the
                                % retransmissionQueue with the new next transmission time
                    	
                                retransmissionQueue(num).new_trans_t = nextTransmissionTime;

                                % appends the packetArrivalLog with the station's next transmission time

                                packetArrivalLog = [packetArrivalLog;nextTransmissionTime num];

                                packetArrivalLog = sortrows(packetArrivalLog, 1, 'ascend');
                                fprintf("Station's %d will re-transmits at t = %.7f \n",retransmissionQueue(num).Station,retransmissionQueue(num).new_trans_t)

                            else 
                                fprintf("Maximum number of attempts is reached for station %d \n", retransmissionQueue(num).Station)   
                               
                            end
                        end
                    end
                end
            end
        end
    ThroughputMatrix(a,m) = (successfulTransmissions/packetArrivalLog(end,1))*frameTransmissionTime;
    end
end
plot(OfferedLoad, 100*OfferedLoad.*exp(-2*OfferedLoad), OfferedLoad, 100*ThroughputMatrix(1:length(maxRetransmissions),:))
legend('Theoretical Pure ALOHA', 'No Retransmissions ', 'Max Retransmissions = 1','Max Retransmissions = 3', 'Max Retransmissions = 7')
title("Pure ALOHA: Throughput vs. Offered Load")
ylabel("Throughput (%)")
xlabel("Total Offered Load")
grid on




